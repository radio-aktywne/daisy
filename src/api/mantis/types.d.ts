/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = T | U extends object
  ? (Without<T, U> & U) | (Without<U, T> & T)
  : T | U;
type OneOf<T extends unknown[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
  ? OneOf<[XOR<A, B>, ...Rest]>
  : never;

export interface paths {
  "/ping": {
    /**
     * Ping
     * @description Ping.
     */
    get: operations["PingPing"];
    /**
     * Ping headers
     * @description Ping headers.
     */
    head: operations["PingHeadping"];
  };
  "/tasks/{id}": {
    /**
     * Get task
     * @description Get a task.
     */
    get: operations["TasksIdGet"];
    /**
     * Cancel task
     * @description Cancel a task.
     */
    delete: operations["TasksIdCancel"];
  };
  "/tasks/clean": {
    /**
     * Clean tasks
     * @description Clean tasks.
     */
    post: operations["TasksCleanClean"];
  };
  "/tasks/cancelled/{id}": {
    /**
     * Get cancelled task
     * @description Get a cancelled task.
     */
    get: operations["TasksCancelledIdGetCancelled"];
  };
  "/tasks/completed/{id}": {
    /**
     * Get completed task
     * @description Get a completed task.
     */
    get: operations["TasksCompletedIdGetCompleted"];
  };
  "/tasks/failed/{id}": {
    /**
     * Get failed task
     * @description Get a failed task.
     */
    get: operations["TasksFailedIdGetFailed"];
  };
  "/tasks/pending/{id}": {
    /**
     * Get pending task
     * @description Get a pending task.
     */
    get: operations["TasksPendingIdGetPending"];
  };
  "/tasks/running/{id}": {
    /**
     * Get running task
     * @description Get a running task.
     */
    get: operations["TasksRunningIdGetRunning"];
  };
  "/tasks": {
    /**
     * Get index
     * @description List tasks.
     */
    get: operations["TasksList"];
    /**
     * Schedule task
     * @description Schedule a task.
     */
    post: operations["TasksSchedule"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** CancelledTask */
    CancelledTask: {
      task: components["schemas"]["Task"];
      /**
       * Format: date-time
       * @description Date and time when the task was scheduled.
       */
      scheduled: string;
      /** @description Date and time when the task was started. */
      started?: null | string;
      /**
       * Format: date-time
       * @description Date and time when the task was cancelled.
       */
      cancelled: string;
    };
    /**
     * CleanRequestModel
     * @description Data to clean tasks.
     */
    CleanRequestModel: {
      strategy: components["schemas"]["Specification"];
    };
    /** CleaningResult */
    CleaningResult: {
      /** @description Identifiers of removed tasks. */
      removed: string[];
    };
    /** CompletedTask */
    CompletedTask: {
      task: components["schemas"]["Task"];
      /**
       * Format: date-time
       * @description Date and time when the task was scheduled.
       */
      scheduled: string;
      /**
       * Format: date-time
       * @description Date and time when the task was started.
       */
      started: string;
      /**
       * Format: date-time
       * @description Date and time when the task was completed.
       */
      completed: string;
      /** @description Result of the task. */
      result?:
        | null
        | {
            [key: string]: unknown;
          }
        | unknown[]
        | string
        | number
        | boolean;
    };
    /** FailedTask */
    FailedTask: {
      task: components["schemas"]["Task"];
      /**
       * Format: date-time
       * @description Date and time when the task was scheduled.
       */
      scheduled: string;
      /**
       * Format: date-time
       * @description Date and time when the task was started.
       */
      started: string;
      /**
       * Format: date-time
       * @description Date and time when the task failed.
       */
      failed: string;
      /** @description Error message. */
      error: string;
    };
    /** GenericTask */
    GenericTask: {
      task: components["schemas"]["Task"];
      /**
       * @description Task status.
       * @enum {string}
       */
      status: "pending" | "running" | "cancelled" | "failed" | "completed";
    };
    /** PendingTask */
    PendingTask: {
      task: components["schemas"]["Task"];
      /**
       * Format: date-time
       * @description Date and time when the task was scheduled.
       */
      scheduled: string;
    };
    /** RunningTask */
    RunningTask: {
      task: components["schemas"]["Task"];
      /**
       * Format: date-time
       * @description Date and time when the task was scheduled.
       */
      scheduled: string;
      /**
       * Format: date-time
       * @description Date and time when the task was started.
       */
      started: string;
    };
    /**
     * ScheduleRequestModel
     * @description Data to schedule a task.
     */
    ScheduleRequestModel: {
      operation: components["schemas"]["Specification"];
      condition: components["schemas"]["Specification"];
      /** @description Dependencies of the task. */
      dependencies: {
        [key: string]: string;
      };
    };
    /** Specification */
    Specification: {
      type: string;
      parameters: {
        [key: string]:
          | null
          | {
              [key: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean;
      };
    };
    /**
     * Task
     * @description Task data.
     */
    Task: {
      /** Format: uuid */
      id: string;
      operation: components["schemas"]["Specification"];
      condition: components["schemas"]["Specification"];
      dependencies: {
        [key: string]: string;
      };
    };
    /** TaskIndex */
    TaskIndex: {
      /** @description Identifiers of pending tasks. */
      pending: string[];
      /** @description Identifiers of running tasks. */
      running: string[];
      /** @description Identifiers of cancelled tasks. */
      cancelled: string[];
      /** @description Identifiers of failed tasks. */
      failed: string[];
      /** @description Identifiers of completed tasks. */
      completed: string[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Ping
   * @description Ping.
   */
  PingPing: {
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          "cache-control"?: string;
        };
        content: {
          "application/json": null;
        };
      };
    };
  };
  /**
   * Ping headers
   * @description Ping headers.
   */
  PingHeadping: {
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          "cache-control"?: string;
        };
        content: {
          "application/json": null;
        };
      };
    };
  };
  /**
   * Get task
   * @description Get a task.
   */
  TasksIdGet: {
    parameters: {
      path: {
        /** @description Identifier of the task. */
        id: string;
      };
    };
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["GenericTask"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  /**
   * Cancel task
   * @description Cancel a task.
   */
  TasksIdCancel: {
    parameters: {
      path: {
        /** @description Identifier of the task. */
        id: string;
      };
    };
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CancelledTask"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  /**
   * Clean tasks
   * @description Clean tasks.
   */
  TasksCleanClean: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CleanRequestModel"];
      };
    };
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CleaningResult"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": OneOf<
            [
              {
                status_code: number;
                detail: string;
                extra?:
                  | null
                  | {
                      [key: string]: unknown;
                    }
                  | unknown[];
              },
              {
                status_code: number;
                detail: string;
                extra?:
                  | null
                  | {
                      [key: string]: unknown;
                    }
                  | unknown[];
              },
            ]
          >;
        };
      };
    };
  };
  /**
   * Get cancelled task
   * @description Get a cancelled task.
   */
  TasksCancelledIdGetCancelled: {
    parameters: {
      path: {
        /** @description Identifier of the task. */
        id: string;
      };
    };
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CancelledTask"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  /**
   * Get completed task
   * @description Get a completed task.
   */
  TasksCompletedIdGetCompleted: {
    parameters: {
      path: {
        /** @description Identifier of the task. */
        id: string;
      };
    };
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["CompletedTask"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  /**
   * Get failed task
   * @description Get a failed task.
   */
  TasksFailedIdGetFailed: {
    parameters: {
      path: {
        /** @description Identifier of the task. */
        id: string;
      };
    };
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["FailedTask"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  /**
   * Get pending task
   * @description Get a pending task.
   */
  TasksPendingIdGetPending: {
    parameters: {
      path: {
        /** @description Identifier of the task. */
        id: string;
      };
    };
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["PendingTask"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  /**
   * Get running task
   * @description Get a running task.
   */
  TasksRunningIdGetRunning: {
    parameters: {
      path: {
        /** @description Identifier of the task. */
        id: string;
      };
    };
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["RunningTask"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  /**
   * Get index
   * @description List tasks.
   */
  TasksList: {
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["TaskIndex"];
        };
      };
    };
  };
  /**
   * Schedule task
   * @description Schedule a task.
   */
  TasksSchedule: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScheduleRequestModel"];
      };
    };
    responses: {
      /** @description Document created, URL follows */
      201: {
        headers: {};
        content: {
          "application/json": components["schemas"]["PendingTask"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": OneOf<
            [
              {
                status_code: number;
                detail: string;
                extra?:
                  | null
                  | {
                      [key: string]: unknown;
                    }
                  | unknown[];
              },
              {
                status_code: number;
                detail: string;
                extra?:
                  | null
                  | {
                      [key: string]: unknown;
                    }
                  | unknown[];
              },
            ]
          >;
        };
      };
    };
  };
}
